import React, {useEffect, useState} from 'react';
import PlayerCard from '../components/OverallPlayerCard';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import {Oval} from 'react-loader-spinner';
import Footer from '../components/Footer';
import '../css/grid.css';
import '../css/leaderboard.css';

function openNetlifyModal() {
  const netlifyIdentity = window.netlifyIdentity;

  if(netlifyIdentity) {
    netlifyIdentity.open();
  } else {
    console.log('netlifyIdentity not defined')
  }
}

const {REACT_APP_SHEET_ID} = process.env;
const {REACT_APP_GOOGLE_CLIENT_EMAIL} = process.env;
const {REACT_APP_GOOGLE_PRIVATE_KEY} = process.env;

const doc = new GoogleSpreadsheet(REACT_APP_SHEET_ID);

(async function() {
    await doc.useServiceAccountAuth({
        // env var values are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        client_email: REACT_APP_GOOGLE_CLIENT_EMAIL,
        private_key: REACT_APP_GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
      });
}())

export default function Leaderboard({userName}) {
  const [playerRows, setPlayerRows] = useState([]);
  const [isLoading, setIsLoading] = useState(true)

  const loadSheet = async (getRows) => {
    setIsLoading(true);
    await doc.loadInfo()
              .then(async () => {
                const rows = await doc.sheetsByIndex[0].getRows()
                setPlayerRows(rows)
                setIsLoading(false)
              })
  }

  useEffect(() => {
    loadSheet()
  }, [])
  if(isLoading) {
    return (
      <div className="container">
        <div className="loader">
          <Oval color="#FFFFFF" height={50} width={50} />
        </div>
      </div>
    )
  } else {
    return (
        <div className="container">
            <h1>Fremont Poker Room</h1>
            {/* <button onClick={() => openNetlifyModal()}>Login/Sign Up</button> */}
            <div className='grid-container'>
              <div className="homeGrid">
                <div className="gridHeader">Name</div>
                <div className="noMobileDisplay gridHeader">Buy Ins</div>
                <div className="noMobileDisplay gridHeader">Winnings</div>
                <div className="gridHeader">=/-</div>
              </div>
                    {/* Sort playerRows by highest +/- which returns an ordered array */}
                    {playerRows && playerRows.sort((a,b) => {
                      return ((b.winnings - b.buyIn) - (a.winnings - a.buyIn))
                      {/* Map the array */}
                    }).map((row) => {
                      if(userName === row.playerName) {
                        return (
                          <PlayerCard playerName={row.playerName} totalBuyIns={row.buyIn} winnings={row.winnings}
                                        key={playerRows.indexOf(row)} isUser={true} />
                        )
                      } else{
                        return (
                            <PlayerCard playerName={row.playerName} totalBuyIns={row.buyIn} winnings={row.winnings}
                                        key={playerRows.indexOf(row)} />
                        )
                      }
                    })}
            </div>
            <Footer />
        </div>
    )
  }
}
