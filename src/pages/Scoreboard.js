import React, {useEffect, useState} from 'react';
import EntryForm from '../components/EntryForm';
import PlayerCard from '../components/NewTournamentPlayerCard';
import { GoogleSpreadsheet } from 'google-spreadsheet';

const {REACT_APP_SHEET_ID} = process.env;
const {REACT_APP_GOOGLE_CLIENT_EMAIL} = process.env;
const {REACT_APP_GOOGLE_PRIVATE_KEY} = process.env;

const doc = new GoogleSpreadsheet(REACT_APP_SHEET_ID);

(async function() {
    await doc.useServiceAccountAuth({
        // env var values are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        client_email: REACT_APP_GOOGLE_CLIENT_EMAIL,
        private_key: REACT_APP_GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
      });
}())


export default function Scoreboard() {
    const [tournamentName, setTournamentName] = useState('');
    const [currentSheet, setCurrentSheet] = useState({});
    const [currentRows, setCurrentRows] = useState([]);

    const loadSheet = async () => {
        await doc.loadInfo()
    }

    const createNewSheet = async (tournamentName) => {
        const newSheet = await doc.addSheet({ title: `${tournamentName}`, headerValues: ['playerName', 'buyIn'] });
    }

    const addRow = async (pName, buyInAmount) => {
        const sheet = doc.sheetsByTitle[tournamentName];
        const newRow = await sheet.addRow({ playerName: pName, buyIn: buyInAmount });
        setCurrentSheet(sheet)
        getRows();
    }
    const getRows = async () => {
        const rows = await doc.sheetsByTitle[tournamentName].getRows()
        setCurrentRows(rows)
    }

    const addRebuy = async (playerName) => {
        const sheet = doc.sheetsByTitle[tournamentName];
        const rows = await sheet.getRows();
        for (let i = 0; i < rows.length; i++) {
            if(rows[i].playerName === playerName) {
                rows[i].buyIn = Number(rows[i].buyIn) + 20
                console.log(rows[i].buyIn)
                await rows[i].save()
                getRows();
            }
        }
    }
    
    const removePlayer = async (playerName) => {
        const sheet = doc.sheetsByTitle[tournamentName];
        const rows = await sheet.getRows();
        for (let i = 0; i < rows.length; i++) {
            if(rows[i].playerName === playerName) {
                await rows[i].delete();
                getRows();
            }
        }
    }

    useEffect(() => {
        loadSheet()
    }, [])

    return (
        <div>
            <input placeholder="MonthYear" onChange={(e) => setTournamentName(e.target.value)} />
            <button onClick={() => createNewSheet(tournamentName)}>Create New Tourament</button>
            <EntryForm addRow={addRow} />
            <table>
                <thead>
                    <tr>
                        <th>Player Name</th>
                        <th>Total Buy Ins</th>
                        <th></th>
                        <th></th>  
                    </tr>
                </thead>
                <tbody>
                    {currentRows && currentRows.map((row) => {
                        return (
                            <PlayerCard playerName={row.playerName} totalBuyIns={row.buyIn}
                                        addRebuy={addRebuy} removePlayer={removePlayer}
                                        key={currentRows.indexOf(row)} />
                        )
                    })}
                </tbody>
            </table>
            <button onClick={() => getRows()}>Get Rows</button>
        </div>
    )
}
